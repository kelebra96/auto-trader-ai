# Script de Teste de Conectividade VPS
# Auto Trader AI - Diagn√≥stico Completo

param(
    [string]$VpsIP = "212.85.17.99",
    [string]$VpsPort = "22",
    [string]$Username = "root"
)

Write-Host "=== Teste de Conectividade VPS - Auto Trader AI ===" -ForegroundColor Green
Write-Host "VPS: $VpsIP porta $VpsPort" -ForegroundColor Yellow
Write-Host "Usuario: $Username" -ForegroundColor Yellow
Write-Host ""

# Fun√ß√£o para testar conectividade b√°sica
function Test-BasicConnectivity {
    Write-Host "1. Testando conectividade b√°sica..." -ForegroundColor Cyan
    
    try {
        $pingResult = Test-Connection -ComputerName $VpsIP -Count 3 -ErrorAction Stop
        $avgTime = ($pingResult | Measure-Object ResponseTime -Average).Average
        Write-Host "‚úÖ Ping OK - Tempo m√©dio: ${avgTime}ms" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå Ping falhou: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fun√ß√£o para testar porta SSH
function Test-SSHPort {
    Write-Host "2. Testando porta SSH ($VpsPort)..." -ForegroundColor Cyan
    
    try {
        $tcpClient = New-Object System.Net.Sockets.TcpClient
        $connectTask = $tcpClient.ConnectAsync($VpsIP, $VpsPort)
        $connectTask.Wait(5000)
        
        if ($tcpClient.Connected) {
            Write-Host "‚úÖ Porta $VpsPort est√° aberta e acess√≠vel" -ForegroundColor Green
            $tcpClient.Close()
            return $true
        } else {
            Write-Host "‚ùå Porta $VpsPort n√£o est√° acess√≠vel" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "‚ùå Erro ao testar porta $VpsPort : $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fun√ß√£o para testar SSH interativo
function Test-SSHInteractive {
    Write-Host "3. Testando conex√£o SSH interativa..." -ForegroundColor Cyan
    
    # Verificar se ssh est√° dispon√≠vel
    $sshPath = Get-Command ssh -ErrorAction SilentlyContinue
    if (-not $sshPath) {
        Write-Host "‚ùå Comando SSH n√£o encontrado" -ForegroundColor Red
        Write-Host "   Instale OpenSSH ou use PuTTY" -ForegroundColor Yellow
        return $false
    }
    
    Write-Host "Tentando conex√£o SSH..." -ForegroundColor Gray
    Write-Host "Comando: ssh -p $VpsPort $Username@$VpsIP" -ForegroundColor White
    Write-Host ""
    Write-Host "‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ precisar√° inserir a senha manualmente" -ForegroundColor Yellow
    Write-Host "Senha: Ro04041932.." -ForegroundColor White
    Write-Host ""
    
    $response = Read-Host "Deseja tentar a conex√£o SSH agora? (s/n)"
    
    if ($response -eq 's' -or $response -eq 'S') {
        try {
            # Tentar conex√£o SSH
            & ssh -p $VpsPort "$Username@$VpsIP" "echo 'Conex√£o SSH bem-sucedida!'; exit"
            Write-Host "‚úÖ Conex√£o SSH funcionou!" -ForegroundColor Green
            return $true
        } catch {
            Write-Host "‚ùå Erro na conex√£o SSH: $($_.Exception.Message)" -ForegroundColor Red
            return $false
        }
    } else {
        Write-Host "‚è≠Ô∏è  Teste SSH pulado pelo usu√°rio" -ForegroundColor Yellow
        return $null
    }
}

# Fun√ß√£o para verificar ferramentas de deployment
function Test-DeploymentTools {
    Write-Host "4. Verificando ferramentas de deployment..." -ForegroundColor Cyan
    
    $tools = @{
        "ssh" = "OpenSSH Client"
        "scp" = "Secure Copy"
        "plink" = "PuTTY Link"
        "pscp" = "PuTTY SCP"
        "winget" = "Windows Package Manager"
    }
    
    $availableTools = @()
    
    foreach ($tool in $tools.Keys) {
        $toolPath = Get-Command $tool -ErrorAction SilentlyContinue
        if ($toolPath) {
            Write-Host "‚úÖ $($tools[$tool]) dispon√≠vel" -ForegroundColor Green
            $availableTools += $tool
        } else {
            Write-Host "‚ùå $($tools[$tool]) n√£o encontrado" -ForegroundColor Red
        }
    }
    
    return $availableTools
}

# Fun√ß√£o para gerar relat√≥rio
function Generate-Report {
    param(
        [bool]$PingOK,
        [bool]$PortOK,
        [bool]$SSHOK,
        [array]$Tools
    )
    
    Write-Host ""
    Write-Host "=== RELAT√ìRIO DE CONECTIVIDADE ===" -ForegroundColor Green
    Write-Host ""
    
    Write-Host "üìä Resultados dos Testes:" -ForegroundColor Yellow
    Write-Host "   Ping: $(if($PingOK){'‚úÖ OK'}else{'‚ùå FALHOU'})" -ForegroundColor White
    Write-Host "   Porta SSH: $(if($PortOK){'‚úÖ OK'}else{'‚ùå FALHOU'})" -ForegroundColor White
    Write-Host "   Conex√£o SSH: $(if($SSHOK -eq $true){'‚úÖ OK'}elseif($SSHOK -eq $false){'‚ùå FALHOU'}else{'‚è≠Ô∏è N√ÉO TESTADO'})" -ForegroundColor White
    
    Write-Host ""
    Write-Host "üõ†Ô∏è  Ferramentas Dispon√≠veis:" -ForegroundColor Yellow
    if ($Tools.Count -gt 0) {
        foreach ($tool in $Tools) {
            Write-Host "   ‚úÖ $tool" -ForegroundColor Green
        }
    } else {
        Write-Host "   ‚ùå Nenhuma ferramenta de deployment encontrada" -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "üìã Recomenda√ß√µes:" -ForegroundColor Yellow
    
    if (-not $PingOK) {
        Write-Host "   üîß Verificar conectividade de rede" -ForegroundColor White
        Write-Host "   üîß Verificar se o IP est√° correto" -ForegroundColor White
    }
    
    if (-not $PortOK) {
        Write-Host "   üîß Verificar se SSH est√° rodando na VPS" -ForegroundColor White
        Write-Host "   üîß Verificar configura√ß√µes de firewall" -ForegroundColor White
    }
    
    if ($SSHOK -eq $false) {
        Write-Host "   üîß Verificar credenciais de login" -ForegroundColor White
        Write-Host "   üîß Verificar configura√ß√µes SSH da VPS" -ForegroundColor White
    }
    
    if ($Tools -notcontains "ssh" -and $Tools -notcontains "plink") {
        Write-Host "   üîß Instalar OpenSSH ou PuTTY" -ForegroundColor White
    }
    
    Write-Host ""
    Write-Host "üìÅ Pr√≥ximos Passos:" -ForegroundColor Yellow
    
    if ($PingOK -and $PortOK) {
        Write-Host "   1. Use o guia manual: MANUAL_DEPLOYMENT_GUIDE.md" -ForegroundColor White
        Write-Host "   2. Ou tente o deployment automatizado novamente" -ForegroundColor White
        Write-Host "   3. Arquivos prontos em: upload_package/" -ForegroundColor White
    } else {
        Write-Host "   1. Resolver problemas de conectividade primeiro" -ForegroundColor White
        Write-Host "   2. Contatar provedor da VPS se necess√°rio" -ForegroundColor White
        Write-Host "   3. Verificar configura√ß√µes de rede" -ForegroundColor White
    }
}

# Executar testes
$pingResult = Test-BasicConnectivity
Write-Host ""

$portResult = Test-SSHPort
Write-Host ""

$sshResult = Test-SSHInteractive
Write-Host ""

$toolsResult = Test-DeploymentTools
Write-Host ""

# Gerar relat√≥rio final
Generate-Report -PingOK $pingResult -PortOK $portResult -SSHOK $sshResult -Tools $toolsResult

Write-Host ""
Write-Host "=== Teste Conclu√≠do ===" -ForegroundColor Green